#!/usr/bin/env ruby
require 'ftools'
require 'rubygems'
require 'RMagick'
include Magick

files = [ 
          #'javascripts/f.js', 
          #'javascripts/gh.js', 
          # 'javascripts/vendors/difflib.js',
          # 'javascripts/vendors/diffview.js'
           'javascripts/prototype.js'
        ]

temp_file           = 'merge.js'
min_temp_file       = 'merge.min.js'
image_file          = "code.png"
crushed_image_file  = "code.crushed.png"

# Merged and minify scripts
merged_file = ""
files.each {|file| 
  File.open( file, "r") { |f| 
    merged_file += f.read + "\n" 
  }
}
File.open( temp_file , "w") {|f| f.write(merged_file) }

cmd = "java -jar bin/yuicompressor-2.4.2.jar #{temp_file} -o #{min_temp_file}"

js = `#{cmd}`

# debug out put
# File.open( min_temp_file , "w") {|f| f.write(js) }
js = ''
File.open( min_temp_file, "r") { |f| 
  js += f.read + "\n" 
}


# js = "1" * 1073

# js = js[0,880]
puts js

size  = (js.length/3.0).ceil

puts size

image = Magick::Image.new(1,size)
i = 0
while i < js.length do 
  # c = [ js[i], js[i+1] || 0 , js[i+2] || 0 ]
  r = js[i]
  g = js[i + 1]
  b = js[i + 2]
  
  g ||= 0
  b ||= 0
  
  # color is in format #RRGGBB
  color = '#' + '%02X' % r + '%02X' % g + '%02X' % b
  
  y = i / 3
  pixel = Magick::Pixel.from_color color
  image.pixel_color 0, y, pixel
  i += 3

end

# size.times do |x|
#   size.times do |y|
# 
#     c = js[x * size * 3 + y ]
# 
#     next unless c
# 
#     c1 = js[x * size * 3 + y + 1 ] || 0
#     c2 = js[x * size * 3 + y + 2 ] || 0
#     # r = ('%2X' % c)
#     pixel = Magick::Pixel.new c*1_000, c1 * 100, c2
#     image.pixel_color x, y, pixel
#     
#     puts [c, c1, c2]
#   end 
# end

image.compression = ZipCompression
# image.write("png8:"+ image_file)
image.write("png8:"+ image_file)

File.open( temp_file , "r" )
pic = (Image.read(image_file)).first


puts "Validates Output"
s = ''
pic.each_pixel do |px, x, y|
  s1 = (px.red % 256 ).chr + (px.green % 256).chr + (px.blue % 256 ).chr
  s += (px.red   % 256).chr
  s += (px.green % 256).chr
  s += (px.blue  % 256).chr
end

puts s

puts "-------------Unique Characters:"
unique_chars = {}
s.each_char do |c|
  unique_chars[c] ||= 0
  unique_chars[c] += 1
end

puts unique_chars.keys.sort.join(' ')
puts unique_chars.length

cmd = "pngcrush -reduce -l 9 #{image_file} #{crushed_image_file}"
`cmd`

[ image_file, crushed_image_file ].each do |file|
  puts "#{"%-20.20s" % file} #{"%30s" % File.stat( file ).size}"
end
