#!/usr/bin/env ruby
require 'ftools'
require 'rubygems'
require 'RMagick'
include Magick

files = [ 'javascripts/f.js', 'javascripts/gh.js', 'javascripts/vendors/difflib.js', 'javascripts/vendors/diffview.js' ]

temp_file = 'merge.js'
min_temp_file = 'merge.min.js'

image_file = "code.png"

merged_file = ""
files.each {|file| 
  File.open( file, "r") { |f| 
    merged_file += f.read + "\n" 
  }
}
File.open( temp_file , "w") {|f| f.write(merged_file) }

cmd = "java -jar bin/yuicompressor-2.4.2.jar #{temp_file}"


js = `#{cmd}`

File.open( min_temp_file , "w") {|f| f.write(js) }


# js = 'var AR=Ajax.Request;var F=Class.create({initialize:function(a){a=Object.extend({user_id:"rails",repository:"rails",branch:"master"},a||{});this.panels=[];this.panelsWrapper=$("panels_wrapper");this.browserWrapper=$("browser_wrapper");this.shas={};this.user_id=a.user_id;this.repository=a.repository;this.branch=a.branch;GH.Commits.listBranch(this.user_id,this.repository,this.branch,{onData:function(c){var b=c.commits[0].tree;this.renderPanel(b)}.bind(this)});document.on("click","a[data-sha]"'

js = js[0,1072]

size  = (js.length/3.0).ceil

puts size

image = Magick::Image.new(1,size)
i = 0
while i < js.length do 
  # c = [ js[i], js[i+1] || 0 , js[i+2] || 0 ]
  r = js[i]
  g = js[i + 1]
  b = js[i + 2]
  
  g ||= 0
  b ||= 0
  
  
  color = '#' + '%02X' % r + '%02X' % g + '%02X' % b
  # color = "rgb(%d,%d,%d)" % [r, g, b] # + r + '%02x' % g + '%02x' % g + ')'
  # puts color
  
  y = i / 3
  # puts y
  # r = ('%2X' % c)
  # pixel = Magick::Pixel.new r * 1_0000, g * 100, b
  pixel = Magick::Pixel.from_color color
  image.pixel_color 0, y, pixel
  i += 3
  
  # puts "pixel: #{pixel}"
end

# size.times do |x|
#   size.times do |y|
# 
#     c = js[x * size * 3 + y ]
# 
#     next unless c
# 
#     c1 = js[x * size * 3 + y + 1 ] || 0
#     c2 = js[x * size * 3 + y + 2 ] || 0
#     # r = ('%2X' % c)
#     pixel = Magick::Pixel.new c*1_000, c1 * 100, c2
#     image.pixel_color x, y, pixel
#     
#     puts [c, c1, c2]
#   end 
# end

image.compression = ZipCompression
# image.write("png8:"+ image_file)
image.write("png8:"+ image_file)

File.open( temp_file , "r" )
pic = (Image.read(image_file)).first


puts "Validates Output"
s = ''
pic.each_pixel do |px, x, y|
  s1 = (px.red % 256 ).chr + (px.green % 256).chr + (px.blue % 256 ).chr
  
  s += (px.red % 256 ).chr
  s += (px.green % 256).chr
  s += (px.blue % 256 ).chr
  
  
  # puts s1
end

puts s